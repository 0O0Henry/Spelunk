<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>status = 0;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keysSave();
audio_resume_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.fontSmall);
draw_set_color(c_yellow);
strLen = string_length(tr("PRESS KEY FOR"))*global.fontSmallWidth;
n = 160 - strLen;
n = ceil(n / 2);
draw_text(n, 32, tr("PRESS KEY FOR"));
draw_text(8, 96, tr("ESC TO KEEP SAME."));
draw_text(8, 104, tr("CURRENT: "));

if (status == 0)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("UP"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("UP"));
    currVal = global.keyUpVal;
}
else if (status == 1)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("DOWN"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("DOWN"));
    currVal = global.keyDownVal;
}
else if (status == 2)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("LEFT"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("LEFT"));
    currVal = global.keyLeftVal;
}
else if (status == 3)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("RIGHT"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("RIGHT"));
    currVal = global.keyRightVal;
}
else if (status == 4)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("JUMP"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("JUMP"));
    currVal = global.keyJumpVal;
}
else if (status == 5)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("ACTION"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("ACTION"));
    currVal = global.keyAttackVal;
}
else if (status == 6)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("SWITCH"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("SWITCH"));
    currVal = global.keyItemVal;
}
else if (status == 7)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("RUN"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("RUN"));
    currVal = global.keyRunVal;
}
else if (status == 8)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("BOMB"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("BOMB"));
    currVal = global.keyBombVal;
}
else if (status == 9)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("ROPE"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("ROPE"));
    currVal = global.keyRopeVal;
}
/*
else if (status == 10)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("FLARE"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("FLARE"));
    currVal = global.keyFlareVal;
}
*/
else if (status == 10)
{
    draw_set_font(global.fontLarge);
    draw_set_color(c_white);
    strLen = string_length(tr("PURCHASE"))*global.fontLargeWidth;
    n = 160 - strLen;
    n = ceil(n / 2);
    draw_text(n, 40, tr("PURCHASE"));
    currVal = global.keyPayVal;
}

draw_set_font(global.fontSmall);
switch (currVal)
{
    case vk_up: { draw_text(80, 104, tr("UP ARR")); break; }
    case vk_down: { draw_text(80, 104, tr("DOWN ARR")); break; }
    case vk_left: { draw_text(80, 104, tr("LEFT ARR")); break; }
    case vk_right: { draw_text(80, 104, tr("RIGHT ARR")); break; }
    case vk_shift: { draw_text(80, 104, "SHIFT"); break; }
    case vk_control: { draw_text(80, 104, "CTRL"); break; }
    case vk_alt: { draw_text(80, 104, "ALT"); break; }
    case vk_space: { draw_text(80, 104, "SPACE"); break; }
    case vk_enter: { draw_text(80, 104, "ENTER"); break; }
    case ord("A"): { draw_text(80, 104, "A"); break; }
    case ord("B"): { draw_text(80, 104, "B"); break; }
    case ord("C"): { draw_text(80, 104, "C"); break; }
    case ord("D"): { draw_text(80, 104, "D"); break; }
    case ord("E"): { draw_text(80, 104, "E"); break; }
    case ord("F"): { draw_text(80, 104, "F"); break; }
    case ord("G"): { draw_text(80, 104, "G"); break; }
    case ord("H"): { draw_text(80, 104, "H"); break; }
    case ord("I"): { draw_text(80, 104, "I"); break; }
    case ord("J"): { draw_text(80, 104, "J"); break; }
    case ord("K"): { draw_text(80, 104, "K"); break; }
    case ord("L"): { draw_text(80, 104, "L"); break; }
    case ord("M"): { draw_text(80, 104, "M"); break; }
    case ord("N"): { draw_text(80, 104, "N"); break; }
    case ord("O"): { draw_text(80, 104, "O"); break; }
    case ord("P"): { draw_text(80, 104, "P"); break; }
    case ord("Q"): { draw_text(80, 104, "Q"); break; }
    case ord("R"): { draw_text(80, 104, "R"); break; }
    case ord("S"): { draw_text(80, 104, "S"); break; }
    case ord("T"): { draw_text(80, 104, "T"); break; }
    case ord("U"): { draw_text(80, 104, "U"); break; }
    case ord("V"): { draw_text(80, 104, "V"); break; }
    case ord("W"): { draw_text(80, 104, "W"); break; }
    case ord("X"): { draw_text(80, 104, "X"); break; }
    case ord("Y"): { draw_text(80, 104, "Y"); break; }
    case ord("Z"): { draw_text(80, 104, "Z"); break; }
    default: { draw_text(80, 104, "KEY " + string(currVal)); break; }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_key != vk_escape)
{
if (status == 0)
{
    global.keyUpVal = keyboard_key;
}
else if (status == 1)
{
    global.keyDownVal = keyboard_key;
}
else if (status == 2)
{
    global.keyLeftVal = keyboard_key;
}
else if (status == 3)
{
    global.keyRightVal = keyboard_key;
}
else if (status == 4)
{
    global.keyJumpVal = keyboard_key;
}
else if (status == 5)
{
    global.keyAttackVal = keyboard_key;
}
else if (status == 6)
{
    global.keyItemVal = keyboard_key;
}
else if (status == 7)
{
    global.keyRunVal = keyboard_key;
}
else if (status == 8)
{
    global.keyBombVal = keyboard_key;
}
else if (status == 9)
{
    global.keyRopeVal = keyboard_key;
}
/*
else if (status == 10)
{
    global.keyFlareVal = keyboard_key;
}
*/
else if (status == 10)
{
    global.keyPayVal = keyboard_key;
}
}

status += 1;
if (status &gt; 10) room_goto(rTitle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
