<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrReadStats();
scrInit();
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>py = 0; // player Y coord

// screen
screen_x = 0;
screen_y = 0;
screen_w = display_get_width();
screen_h = display_get_height();
enabled = true;

// pause
pSurf = -1 surface_create(screen_w,screen_h);
canPause = true;
paused = false;

// create a surface for the whole screen to be drawn on
screen = -1; //surface_create(screen_w,screen_h);
darkSurf = surface_create(screen_w,screen_h);

// use all screen space if possible
h = 240;
global.screenAspectRatio = (screen_w/screen_h);
if ((global.screenAspectRatio &gt;= 1.333333333) and (global.screenAspectRatio &lt;= 1.875)) {
    w = round(240 * global.screenAspectRatio);
    global.touchCorrectionH = 0;
    global.touchCorrectionV = 0;
} else {
    if (global.screenAspectRatio &gt; 1.875) {
        w = 450;
        global.touchCorrectionH = ((w - 320)/8);
        global.touchCorrectionV = 0;
    } else if (global.screenAspectRatio &lt; 1.333333333) {
        w = 320;
        global.touchCorrectionH = 0;
        global.touchCorrectionV = ((screen_h - 240)/10);
    }
}

// set up rooms
global.room_offset = ((w - 320)/2);
room_set_view(rIntro,0,true,0,0,w,h,0,0,w,h,128,0,-1,-1,oPDummy3);
room_set_view(rCredits1,0,true,0,0,w,h,0,0,w,h,0,0,0,0,noone);
room_set_view(rCredits2,0,true,0,0,w,h,0,0,w,h,0,0,0,0,noone);
room_set_view(rTitle,0,true,0,0,w,h,0,0,w,h,0,0,0,0,noone);
room_set_view(rHighscores,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rSun,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rMoon,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rStars,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rLevelEditor,0,true,0,0,w,h,0,0,w,h,0,0,-1,-1,noone);
room_set_view(rLoadLevel,0,true,0,0,w,h,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rTutorial,0,true,0,0,w,h,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rLevel,0,true,0,0,w,h,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rLevel2,0,true,0,0,w,h,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rLevel3,0,true,0,0,w,h,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rOlmec,0,true,0,0,w,h,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rTransition1,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rTransition1x,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rTransition2,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rTransition2x,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rTransition3,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rTransition3x,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rTransition4,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rEnd,0,true,0,0,w,h,0,0,w,h,0,0,0,0,oPDummy);
room_set_view(rEnd2,0,true,-2*global.room_offset,0,w,h,-2*global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rEnd3,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);
room_set_view(rEndCustom,0,true,-global.room_offset,0,w,h,-global.room_offset,0,w,h,0,0,0,0,noone);

conf_x = (w - 160)/2;
conf_y = (h - 120 - 32)/2;

room_set_view(rKeyConfig,0,true,-conf_x,-conf_y,w,h,-conf_x,-conf_y,w,h,0,0,0,0,noone);
room_set_view(rJoyConfig,0,true,-conf_x,-conf_y,w,h,-conf_x,-conf_y,w,h,0,0,0,0,noone);
room_set_view(rJoyConfigHtml5,0,true,-conf_x,-conf_y,w,h,-conf_x,-conf_y,w,h,0,0,0,0,noone);

window_set_size(screen_w, screen_h);
if (global.fullscreen){
    if (!global.html5Build) {
        window_set_size(screen_w, screen_h);
        window_set_fullscreen(true);
    } else {
        if (global.electronBuild) {
            newSize = electronSetFullscreen(true);
            window_set_size(newSize[0], newSize[1]);
        }
    }
}

if (!global.html5Build) {
    window_set_size(800, 800/global.screenAspectRatio);
}
surface_resize(application_surface, w, h);
view_wview[0] = w;
view_wport[0] = w;
view_hview[0] = h;
view_hport[0] = h;

global.display_w = w;
global.display_h = h;

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>113</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_reverse_xdir</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>119</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_path</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>8</kind>
            <path>-1</path>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>120</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_linear_step</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>120</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_linear_step</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>109</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_move_to</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NEW

if (not surface_exists(pSurf)) pSurf = surface_create(global.display_w, global.display_h);
if (not surface_exists(screen)) screen = surface_create(global.display_w, global.display_h);
if (not surface_exists(darkSurf)) darkSurf = surface_create(global.display_w, global.display_h);

if (checkBombPressed())
{
    if (paused and global.plife &gt; 0 and isLevel())
    {
        instance_activate_all();
        paused = false;
        with oPlayer1
        {
            if (facing == 18) xVel = -3;
            else xVel = 3;
            yVel = -6;
            global.plife = -99;
        }
    
        if (SS_IsSoundPlaying(global.musTitle)) SS_SetSoundVol(global.musTitle, 2000 + 8000 * (global.musicVol/18));
        if (SS_IsSoundPlaying(global.musCave)) SS_SetSoundVol(global.musCave, 2000 + 8000 * (global.musicVol/18));
        if (SS_IsSoundPlaying(global.musLush)) SS_SetSoundVol(global.musLush, 2000 + 8000 * (global.musicVol/18));
        if (SS_IsSoundPlaying(global.musIce)) SS_SetSoundVol(global.musIce, 2000 + 8000 * (global.musicVol/18));
        if (SS_IsSoundPlaying(global.musTemple)) SS_SetSoundVol(global.musTemple, 2000 + 8000 * (global.musicVol/18));
        if (SS_IsSoundPlaying(global.musBoss)) SS_SetSoundVol(global.musBoss, 2000 + 8000 * (global.musicVol/18));
        
        if (not global.hasAnkh) stopAllMusic();
    }
}

else if (checkStartPressed())
{
    if (not paused and canPause)
    {
        if (instance_exists(oPlayer1))
        {
            if (not oPlayer1.dead)
            {
                surface_set_target(pSurf);
                if (global.darkLevel) draw_set_alpha(1);
                else draw_set_alpha(0.9);
                draw_set_color(c_black);
                draw_rectangle(0, 0, global.display_w, global.display_h, false);
                draw_set_alpha(1);
                if (SS_IsSoundPlaying(global.musTitle)) SS_SetSoundVol(global.musTitle, 0);
                if (SS_IsSoundPlaying(global.musCave)) SS_SetSoundVol(global.musCave, 0);
                if (SS_IsSoundPlaying(global.musLush)) SS_SetSoundVol(global.musLush, 0);
                if (SS_IsSoundPlaying(global.musIce)) SS_SetSoundVol(global.musIce, 0);
                if (SS_IsSoundPlaying(global.musTemple)) SS_SetSoundVol(global.musTemple, 0);
                if (SS_IsSoundPlaying(global.musBoss)) SS_SetSoundVol(global.musBoss, 0);
                py = oPlayer1.y;
                instance_deactivate_all(true);
                instance_activate_object(oGamepad);
                instance_activate_object(oNAL);
                paused = true;
            }
        }
    }
    else
    {
        instance_activate_all();
        if (SS_IsSoundPlaying(global.musTitle)) SS_SetSoundVol(global.musTitle, 2000 + 8000 * (global.musicVol/18));
        if (SS_IsSoundPlaying(global.musCave)) SS_SetSoundVol(global.musCave, 2000 + 8000 * (global.musicVol/18));
        if (SS_IsSoundPlaying(global.musLush)) SS_SetSoundVol(global.musLush, 2000 + 8000 * (global.musicVol/18));
        if (SS_IsSoundPlaying(global.musIce)) SS_SetSoundVol(global.musIce, 2000 + 8000 * (global.musicVol/18));
        if (SS_IsSoundPlaying(global.musTemple)) SS_SetSoundVol(global.musTemple, 2000 + 8000 * (global.musicVol/18));
        if (SS_IsSoundPlaying(global.musBoss)) SS_SetSoundVol(global.musBoss, 2000 + 8000 * (global.musicVol/18));
        paused = false;
    }
}

// this draws the surface on the screen
surface_reset_target();
draw_clear(0);
if (paused)
{   
    draw_surface_stretched(pSurf,screen_x,screen_y,window_get_width(),window_get_height());
}
else
{
    if (isRoom("rTitle"))
    {
        surface_set_target(screen);
        draw_set_alpha(oTitle.darkness);
        draw_set_color(c_black);
        
        draw_set_alpha(1);
        surface_reset_target();
    }
    else if (isLevel() and instance_exists(oPlayer1))
    {
        if (global.darkLevel and not oPlayer1.dead)
        {
            surface_set_target(darkSurf);
            draw_set_color(c_black);
            draw_rectangle(0, 0, global.display_w, global.display_h, false);
            draw_set_color(make_color_rgb(255-255*oLevel.darkness,255-255*oLevel.darkness,255));
            if (instance_exists(oLampRed))
            {
                with oPlayer1
                {
                    distToLamp = distance_to_object(oLampRed);
                    if (distToLamp &lt;= 96)
                    {
                        draw_set_color(make_color_rgb(255-distToLamp,120-(96-distToLamp),120-(96-distToLamp)));
                    }
                }
            }
            if (instance_exists(oLampRedItem))
            {
                with oPlayer1
                {
                    distToLamp = distance_to_object(oLampRedItem);
                    if (distToLamp &lt;= 96)
                    {
                        draw_set_color(make_color_rgb(255-distToLamp,120-(96-distToLamp),120-(96-distToLamp)));
                    }
                }
            }
            draw_circle(oPlayer1.x-view_xview[0], oPlayer1.y-view_yview[0], 96-64*oLevel.darkness, false);
            with oFlare
            {
                draw_circle(x-view_xview[0], y-view_yview[0], 96, false);
            }
            with oFlareCrate
            {
                draw_circle(x-view_xview[0], y-view_yview[0], 96, false);
            }
            with oLamp
            {
                draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 96, false);
            }
            with oLampItem
            {
                draw_circle(x-view_xview[0], (y-4)-view_yview[0], 96, false);
            }
            with oArrowTrapLeftLit
            {
                draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
            }
            with oArrowTrapRightLit
            {
                draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
            }
            with oTikiTorch
            {
                draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
            }
            with oFireFrog
            {
                draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
            }
            with oSpearTrapLit
            {
                draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
            }
            with oSmashTrapLit
            {
                draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
            }
            with oExplosion
            {
                draw_circle(x-view_xview[0], y-view_yview[0], 96, false);
            }
            with oLava
            {
                draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
            }
            with oScarab
            {
                draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 16, false);
            }
            with oGhost
            {
                draw_circle((x+16)-view_xview[0], (y+16)-view_yview[0], 64, false);
            }
        }
        surface_reset_target();
    }

    if view_current=0
    {
        draw_surface_stretched(screen, screen_x, screen_y, global.display_w, global.display_h);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(screen);
draw_clear(0);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(screen))
{
    surface_set_target(screen);
    draw_clear(0);
    surface_free(screen);
}
if (surface_exists(pSurf))
{
    surface_set_target(pSurf);
    draw_clear(0);
    surface_free(pSurf);
}
if (surface_exists(darkSurf))
{
    surface_set_target(darkSurf);
    draw_clear(0);
    surface_free(darkSurf);
}
stopAllMusic();
//SS_Unload();
//scrWriteStats();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
